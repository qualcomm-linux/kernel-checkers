name: Sync workspace

inputs:
  base_branch:
    description: Base branch
    required: true
    default: qcom-next-staging
  pr_number:
    description: PR number
    required: false
  topic_repo:
    description: Topic repository
    required: false
    default: qualcomm-linux/kernel-topics

outputs:
  base_sha:
    description: Base sha of the PR
    value: ${{ steps.get_sha.outputs.base_sha }}
  head_sha:
    description: Head sha of the PR
    value: ${{ steps.get_sha.outputs.head_sha }}
  kernel_src:
    description: Path to the kernel source directory
    value: ${{ steps.get_sha.outputs.kernel_src }}

runs:
  using: "composite"
  steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        repository: qualcomm-linux/kernel
        path: kernel

    - name: Configure git
      shell: bash
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"

    - name: Sync with latest changes
      shell: bash
      id: get_sha
      run: |
        set -euo pipefail

        BASE="${{ inputs.base_branch }}"
        PR="${{ inputs.pr_number }}"
        TOPIC_REPO="${{ inputs.topic_repo }}"

        # helper to fetch & merge a PR robustly
        merge_pr() {
          local pr="$1"
          local remote="$2"    # full remote URL
          local ref="pr-${pr}"

          echo "Fetching PR #${pr} from ${remote}..."
          if ! git fetch "${remote}" "pull/${pr}/head:${ref}"; then
            echo "Error: git fetch failed for PR #${pr}" >&2
            return 2
          fi

          echo "Merging ${ref} (no-commit)..."
          if ! git merge "${ref}" --no-commit; then
            echo "Merge failed or conflicts detected. Aborting merge." >&2
            git merge --abort || true
            return 3
          fi

          if ! git diff --cached --quiet; then
            if ! git commit -m "Merged PR #${pr}"; then
              echo "Error: git commit failed" >&2
              return 4
            fi
          else
            echo "Nothing to commit. PR may already be merged or fast-forwarded."
          fi

          return 0
        }

        # work inside checked-out kernel tree
        cd kernel

        if [ "$BASE" = "qcom-next-staging" ]; then
          echo "Syncing qcom-next-staging baseline..."
          git fetch origin "$BASE" --quiet || true
          git merge origin/"$BASE" || true

          git checkout "$BASE" || true

          # base sha = tip before applying PR
          base_sha=$(git rev-parse --verify HEAD)
          echo "base_sha=$base_sha" >> "$GITHUB_OUTPUT"

          if [ -n "$PR" ]; then
            merge_pr "$PR" "https://github.com/qualcomm-linux/kernel.git" || exit $?
          else
            echo "No PR number provided; skipping PR fetch/merge."
          fi
        else
          # non-qcom-next-staging path: run automerge then merge PR
          echo "Syncing qcom-next baseline..."
          git checkout qcom-next || true

          # base sha = tip before applying PR
          base_sha=$(git rev-parse --verify HEAD)
          echo "base_sha=$base_sha" >> "$GITHUB_OUTPUT"

          cd ..
          if [ ! -d "automerge" ]; then
            git clone https://github.com/qualcomm-linux/automerge.git automerge || {
              echo "automerge clone failed" >&2
              exit 5
            }
          fi

          TOPIC_BRANCH="$BASE"
          printf '%s\n' \
            "baseline https://github.com/qualcomm-linux/kernel.git qcom-next" \
            "topic https://github.com/${TOPIC_REPO}.git ${TOPIC_BRANCH}" \
            > merge.conf

          echo "File '../merge.conf' created successfully."

          echo "Running automerge..."
          cd kernel
          ../automerge/ci-merge -f ../merge.conf -t head -n || {
            echo "automerge returned non-zero; check logs for conflicts" >&2
            exit 1
          }

          if [ -n "$PR" ]; then
            REMOTE="https://github.com/${TOPIC_REPO}.git"
            merge_pr "$PR" "$REMOTE" || exit $?
          else
            echo "No PR number provided; skipping PR fetch/merge."
          fi
        fi

        # head sha after PR merge
        head_sha=$(git rev-parse --verify HEAD)
        echo "head_sha=$head_sha" >> "$GITHUB_OUTPUT"
        echo "kernel_src=$(pwd)" >> "$GITHUB_OUTPUT"
